hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
length(IndividualPrior)
length(IndividualPosterior)
max(IndividualPrior)
max(IndividualPosterior)
mean(IndividualPrior)
mean(IndividualPosterior)
print(sum(IndividualPrior))
print(sum(IndividualPosterior))
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(1,100,legend=c("y1","y2","y3"), col=c("blue","red","black"),
pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(1,100,legend=c("y1","y2","y3"), col=c("blue","red","black"),
pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(1,100,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
print(sum(IndividualPosterior))
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(1,100,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(1,100,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(legend=c("prior","posterior"), col=c("blue","red"))
legend(legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(-10,10,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(-10,10,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(10,10,legend=c("prior","posterior"), col=c("blue","red"), pch=c("o","*","+"),lty=c(1,2,3), ncol=1)
legend(1, 95, legend=c("Line 1", "Line 2"), col=c("red", "blue"), lty=1:2, cex=0.8)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(1, 95, legend=c("Line 1", "Line 2"), col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 0.5, legend=c("Line 1", "Line 2"), col=c("red", "blue"), lty=1:2, cex=0.8)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior)
legend(1, 0.5, legend=c("Line 1", "Line 2"), lty=1:2, cex=0.8)
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior, col = "red")
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
ggplot(IndividualPosteriorPlot) +
geom_area(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
IndividualPosteriorPlot <- melt(data.frame(x, IndividualPrior, IndividualPrior), id.vars = 'x')
colnames(IndividualPosteriorPlot) <- c("Evidence",  "Distribution", "Probability")
ggplot(IndividualPosteriorPlot) +
geom_area(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
IndividualPosteriorPlot
sum(IndividualPosteriorPlot)
sum(IndividualPosteriorPlot[,2])
sum(IndividualPosteriorPlot[,1])
sum(IndividualPosteriorPlot[,3])
sum(IndividualPosteriorPlot[1:100,3])
sum(IndividualPosteriorPlot[1:200,3])
sum(IndividualPosteriorPlot[201:400,3])
IndividualPosteriorPlot <- melt(data.frame(x, IndividualPrior, IndividualPrior), id.vars = 'x')
colnames(IndividualPosteriorPlot) <- c("Evidence",  "Distribution", "Probability")
ggplot(IndividualPosteriorPlot) +
geom_line(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
length(IndividualPrior)
length(IndividualPosterior)
max(IndividualPrior)
max(IndividualPosterior)
mean(IndividualPrior)
mean(IndividualPosterior)
print(sum(IndividualPrior))
print(sum(IndividualPosterior))
plot(x, IndividualPrior, type="l", col="blue", pch="o", lty=1, ylim=c(0,1), ylab="y" )
lines(x, IndividualPosterior, col = "red")
legend(1, 0.5, legend=c("Line 1", "Line 2"), col=c("red", "blue"), lty=1:2, cex=0.8)
ggplot(IndividualPosteriorPlot) +
geom_line(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
ggplot(IndividualPosteriorPlot) +
geom_density(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
ggplot(IndividualPosteriorPlot) +
geom_area(
stat ="bin",
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
ggplot(IndividualPosteriorPlot) +
geom_area(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution, stat ="bin"),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
ggplot(IndividualPosteriorPlot) +
geom_line(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
IndividualPosteriorPlot <- melt(data.frame(x, IndividualPrior, IndividualPosterior), id.vars = 'x')
colnames(IndividualPosteriorPlot) <- c("Evidence",  "Distribution", "Probability")
ggplot(IndividualPosteriorPlot) +
geom_line(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
IndividualPosteriorPlot <- melt(data.frame(x, IndividualPrior, IndividualPosterior), id.vars = 'x')
colnames(IndividualPosteriorPlot) <- c("Evidence",  "Distribution", "Probability")
ggplot(IndividualPosteriorPlot) +
geom_area(
data = IndividualPosteriorPlot,
size = 1,
aes(x = Evidence, y = Probability, fill = Distribution, color = Distribution),
alpha = 0.5,
position = "identity"
) +
theme_minimal() +
ggtitle("Individual Belief") +
labs(x = "Events", y = "Perceived Probability") +
scale_x_continuous(limits = c(-10, 10)) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
scale_color_manual(values = c("lightblue", "darkblue")) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
legend.title = element_blank(),
legend.position = c(0.85, 0.6),
legend.background = element_rect(
colour = 'white',
fill = 'white',
size = 3
),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x =  element_text(margin = margin(t = 5, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 5, unit = "pt")),
text = element_text(size = 16)
)
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
?sd
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
IndividualPosterior
x
x-10
(x-10)^2
(x-10)^2 * IndividualPosterior
(x-10)^2 * IndividualPosterior / 10
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
sample?
?sample
sample(x, 10000, prob = IndividualPosterior)
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
which(x < 0)
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
runApp('GitHub/ConfirmationBias-News-BeliefPolarization')
